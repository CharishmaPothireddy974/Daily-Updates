Question:- what is the difference between factory pattern and strategy pattern

Answer:-

 Aspect                              Factory Pattern                                                              Strategy Pattern
Purpose           | To create objects without specifying the exact class.                       | To define a family of algorithms and make them interchangeable at runtime.
Focus             | Object Creation                                                             | Behavior Selection
Problem it solves | When you need to decide which class to instantiate during runtime.          | When you need to switch between different behaviors/algorithms dynamically.
Example           | A ShapeFactory creates Circle, Square, or Triangle objects based on input.  | A PaymentContext uses either CreditCardPayment, PaypalPayment, or UPIPayment 
                                                                                                  strategy depending on user choice.
Main Components   | Factory class, Product classes.                                             | Context class, Strategy interface, Concrete strategy classes.

Simple way to remember:
    Factory Pattern = "Which object to create?"
    Strategy Pattern = "Which behavior/algorithm to use?"

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Question:- Factory Pattern vs Abstract Factory Pattern

Answer:- 

Factory Design Pattern
                               Client
                                 |
                                 V
                               PizzaFactory  ------------>   VegPizza
                                               (based on)  
                                               input      --> NonVegPizza

. Client asks PizzaFactory for a pizza.
. Factory decides whether to give VegPizza or NonVegPizza based on the input.
ðŸ‘‰ Only one object is created.

Abstract Factory Design Pattern
                              Client
                                |
                                V
                              (Choose Factory)
                              VegMealFactory             NonVegMealFactory
                                   |                            |
                                   |                            |
                              (Burger + Fries + Drink)    (Burger + Fries + Drink)

Each factory produces a family of related products:
. VegMealFactory â†’ VegBurger, VegFries, VegDrink
. NonVegMealFactory â†’ ChickenBurger, RegularFries, CokeDrink
ðŸ‘‰ Group of objects created together.

Factory Pattern            Abstract Factory Pattern
One factory, one object. | One factory, many related objects.
Example: One pizza.      | Example: Full meal (Burger + Fries + Drink).

Below is the code for differentiating both Factory Pattern code and Abstract Factory Pattern code

Imagine:
. AppleFactory produces:
     . iPhone (Phone)
     . MacBook (Laptop)
     . iPad (Tablet)
. SamsungFactory produces:
     . GalaxyPhone (Phone)
     . GalaxyBook (Laptop)
     . GalaxyTab (Tablet)
Each factory gives you a set of related products â€” same family, same brand style.

Factory Pattern Code:-

// Step 1: Create the Product Interface
interface Phone {
    void create();
}

// Step 2: Create Concrete Products
class AndroidPhone implements Phone {
    public void create() {
        System.out.println("Creating an Android Phone");
    }
}

class iPhone implements Phone {
    public void create() {
        System.out.println("Creating an iPhone");
    }
}

// Step 3: Create the Factory
class PhoneFactory {
    public static Phone getPhone(String type) {
        if (type.equalsIgnoreCase("ANDROID")) {
            return new AndroidPhone();
        } else if (type.equalsIgnoreCase("IPHONE")) {
            return new iPhone();
        }
        return null;
    }
}

// Step 4: Client Code
public class Main {
    public static void main(String[] args) {
        Phone phone1 = PhoneFactory.getPhone("ANDROID");
        phone1.create();
        
        Phone phone2 = PhoneFactory.getPhone("IPHONE");
        phone2.create();
    }
}

Abstract Factory Pattern Code (Real-World Version) :-

// Abstract Products
interface Phone {
    void create();
}
interface Laptop {
    void create();
}
interface Tablet {
    void create();
}

// Concrete Products for Apple
class iPhone implements Phone {
    public void create() {
        System.out.println("Creating iPhone");
    }
}
class MacBook implements Laptop {
    public void create() {
        System.out.println("Creating MacBook");
    }
}
class iPad implements Tablet {
    public void create() {
        System.out.println("Creating iPad");
    }
}

// Concrete Products for Samsung
class GalaxyPhone implements Phone {
    public void create() {
        System.out.println("Creating Galaxy Phone");
    }
}
class GalaxyBook implements Laptop {
    public void create() {
        System.out.println("Creating Galaxy Book");
    }
}
class GalaxyTab implements Tablet {
    public void create() {
        System.out.println("Creating Galaxy Tab");
    }
}

// Abstract Factory
interface GadgetFactory {
    Phone createPhone();
    Laptop createLaptop();
    Tablet createTablet();
}

// Concrete Factories
class AppleFactory implements GadgetFactory {
    public Phone createPhone() { return new iPhone(); }
    public Laptop createLaptop() { return new MacBook(); }
    public Tablet createTablet() { return new iPad(); }
}

class SamsungFactory implements GadgetFactory {
    public Phone createPhone() { return new GalaxyPhone(); }
    public Laptop createLaptop() { return new GalaxyBook(); }
    public Tablet createTablet() { return new GalaxyTab(); }
}

// Client Code
public class Main {
    public static void main(String[] args) {
        GadgetFactory appleFactory = new AppleFactory();
        Phone applePhone = appleFactory.createPhone();
        Laptop appleLaptop = appleFactory.createLaptop();
        Tablet appleTablet = appleFactory.createTablet();
        
        applePhone.create();
        appleLaptop.create();
        appleTablet.create();
        
        System.out.println("---");
        
        GadgetFactory samsungFactory = new SamsungFactory();
        Phone samsungPhone = samsungFactory.createPhone();
        Laptop samsungLaptop = samsungFactory.createLaptop();
        Tablet samsungTablet = samsungFactory.createTablet();
        
        samsungPhone.create();
        samsungLaptop.create();
        samsungTablet.create();
    }
}

Factory Pattern                                       | Abstract Factory Pattern
PhoneFactory gives you one phone (Android or iPhone). | GadgetFactory gives you full set (Phone + Laptop + Tablet) for Apple or Samsung.
Focus: Create only one object.                        | Focus: Create group of related objects together.

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Question:- Both Abstract Factory and I create objects â€“ thatâ€™s our jobs. But I do it through inheritance...
I didn't understood this.

Answer:- 

First, Factory Method code:

abstract class PizzaStore {  // Base class
    abstract Pizza createPizza(String type);  // Subclass will override this
}

class NYPizzaStore extends PizzaStore {
    Pizza createPizza(String type) {
        return new NYStyleCheesePizza();  // Specific NY pizza
    }
}

Whatâ€™s happening here?
. PizzaStore is an abstract class. It declares createPizza().
. NYPizzaStore is a subclass. It overrides createPizza().
. This is inheritance!
   . NYPizzaStore inherits from PizzaStore.
   . NYPizzaStore changes how pizza is created by overriding the method.
ðŸ§  So when they say "Factory Method uses inheritance", they mean this exact thing:
Subclass overrides a method to create specific objects.

Now, Abstract Factory code:

interface PizzaIngredientFactory {  // Interface
    Dough createDough();
    Sauce createSauce();
}

class NYPizzaIngredientFactory implements PizzaIngredientFactory {
    public Dough createDough() {
        return new ThinCrustDough();
    }
    public Sauce createSauce() {
        return new MarinaraSauce();
    }
}

Whatâ€™s happening here?
. PizzaIngredientFactory is an interface â€” it just declares methods, no logic.
. NYPizzaIngredientFactory implements that interface and provides real objects.
. Later, you pass an instance of NYPizzaIngredientFactory into a Pizza class like this:

PizzaIngredientFactory ingredientFactory = new NYPizzaIngredientFactory();
Pizza pizza = new CheesePizza(ingredientFactory);

. Now the pizza can use the ingredient factory to create its dough, sauce, etc.
This is composition!
. We compose the Pizza object with a reference to an IngredientFactory.
. No inheritance of behavior, just using an object inside another object.
ðŸ§  So when they say "Abstract Factory uses composition", they mean:
. We inject (pass) a factory object into another object to create ingredients.
. No overriding methods â€” just using another object.

Quick Visual Difference:- 
Factory Method                               Abstract Factory
NYPizzaStore extends PizzaStore (inherits) | CheesePizza has a PizzaIngredientFactory (composition)
Override createPizza()                     | Call ingredientFactory.createDough()

In short:
âœ… Factory Method = Subclass overrides a method â†’ (inheritance)
âœ… Abstract Factory = Object uses another factory object â†’ (composition)
